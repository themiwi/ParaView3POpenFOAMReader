OpenFOAM native reader for ParaView 3.3-CVS version 20080831

This reader is a modified version of the native reader included in
ParaView 3.3 which is an original work of Terry Jordan.

The reader is meant to be portable, robust, fast and memory-efficient
ParaView3 reader for OpenFOAM cases.

Manifest
========

  License_v1.2.txt (license)
  ReleaseNotes (this file)
  preInstall.sh (installation preparation script)
  pythonExample.py (a scripting example)
  vtkOpenFOAMReader.cxx (the reader code)
  vtkOpenFOAMReader.h (the reader code)
  vtkOpenFOAMReader.xml (server side XML)

Changes from the previous (20080728) version
============================================

1. Removed the Accumulate Patches option. Zero-sized patches are now
   always preserved in the selection list.

2. Fixed cell normal directions (they all have been inverted!).

3. Experimental parallelized reader plugin for decomposed cases
   (vtk"P"OpenFOAMReader) -- see the "GPL" subdirectory.

4. Support for standard multi-region cases where mesh for each region
   is separeted into separate subdirectory. This means
   chtMultiRegionFoam is not supported.

5. Dropped ParaView 3.2.x support.

6. Support for old mesh format (points/faces/cells).

7. Addition of several extra mesh consistency checks.

8. The license of the reader is now compatible with ParaView License
   v1.2, except for the GPLed materials under the GPL subdirectory.

Installation
============

1. Only required for ThirdParty ParaView3.3-cvs: Setup your OF environment.

      . ~/OpenFOAM/OpenFOAM-1.5/etc/bashrc

2. Untar the package at the parent directory of ParaView3 source tree.

      tar zxf <packageName>-<releaseDate>.tar.bz2

3. Run the preInstall script.

      <packageDirectory>/BSD/preInstall.sh

4. Build ParaView3.
  For general ParaView 3.3-CVS: Build ParaView3 as usual. You would
    want to turn on compiler optimization (set CMAKE_BUILD_TYPE to
    Release). Without it the reader is dead slow. For a rough
    performance indication, the reader loads an ascii-gzipped mesh
    with 3.5 million hexahedral cells in 9 seconds on my 3.0 GHz Mac
    Pro.

  For ThirdParty ParaView3.3-cvs: If you have built your own binary of
    ParaView,

      buildParaView3.3-cvs 1             # should finish in a minute or two!

    If you have not,

      buildParaView3.3-cvs               # wait for a while until it finishes

Notes
=====

1. To load an OpenFOAM case, you either have to
   - create an empty stub file <caseName>.foam right under the case
     directory, where <caseName> is an arbitrary string other than
     strings that starts with "controlDict," and open <caseName>.foam or
   - create a symbolic link from controlDict to controlDict.foam and
     open controlDict.foam.

2. $-expansion only works for complete syntactic units. e. g.

     fieldValue       uniform 0;
     internalField    $fieldValue;

   is supposed to work, while

     fieldValue       0;
     internalField    uniform $fieldValue;

   and

     uniformity       uniform;
     internalField    $uniformity 0;

   are not.

3. ~OpenFOAM expands only to $HOME/.OpenFOAM where $HOME is the user's
   home directory.

4. The #remove directive is not supported.

5. At times you may see a bizarre message "had to make up a value for
   selection" when the selection lists of the reader panel are
   refreshed. The issue has been filed as a ParaView bug #7583.

6. The builtin cell-to-point filter works like a Cell Data to Point
   Data filter in ParaView in that it just takes the average of cell
   values connected to a point. The difference is that the builtin
   filter takes boundary patch values into account. The filter is
   still not as accurate as the volPoint interpolator in paraFoam,
   which further does inverse distance weighting of cell values.

7. The cell-to-point filter is computationally demanding so you can
   turn it off by deselecting "Create cell-to-point filtered data" on
   the reader panel.

8. With the default the reader omits CRC checks for gzipped files
   (except on Windows). If you feel it is too adventurous set
   VTK_FOAMFILE_OMIT_CRCCHECK to 0 at the beginning of
   vtkOpenFOAMReader.cxx.

9. To create a slice with volField data you have to extract internal
   mesh or turn off reading patches in the reader panel.

10. When the List timesteps according to controlDict checkbox is
   turned on the reader lists time instances according to descriptions
   in controlDict when (adjustTimeStep, writeControl) == (yes,
   adjustableRunTime) or (no, timeStep) (i. e. writing interval is
   supposed to be constant in simulated time), or otherwise, lists all
   valid time directories. This is a different behavior from paraFoam
   which always lists all valid time directories in a case directory.

11. The reader lists field names according to the "object" entry in
   FoamFile header, whereas paraFoam lists according to the file name
   of the object. So you need a valid FoamFile header for every
   object.

12. Reading cellZones for polyhedral mesh with the Read Zones feature
   may cause ParaView to thrash.

13. Handling of boundary conditions is quite incomplete as of now; if
   a boundary patch doesn't have a value nor a uniformValue entry the
   corresponding patch-internal field value is used (i. e. equivalent
   to zeroGradient b. c.).

14. Single precision binary format is not supported.

ToDo
====

1. Code cleanup

2. Better B. C. handlings (at least the fixedGradient types should be supported)

3. Implementation of a true and fast cell-to-point interpolator

4. Porting the reader to LLNL VisIt (this is my ultimate goal indeed :) )

Acknowledgements
================

Special thanks to

* Philippose Rajan, for contribution of nice and neat user interface,
  extensively testing the code, interesting discussions and
  suggestions.

* Mark Olesen, for contribution of pre-installation script, testing
  and suggestions.

* Pierre-Olivier Dallaire, for testing.

* Masashi Imano, for testing the code.

/Takuya Oshima (oshima@eng.niigata-u.ac.jp), Aug. 31, 2008
